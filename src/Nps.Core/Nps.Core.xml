<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nps.Core</name>
    </assembly>
    <members>
        <member name="T:Nps.Core.Aop.Attributes.CachingAttribute">
            <summary>
            缓存
            </summary>
        </member>
        <member name="P:Nps.Core.Aop.Attributes.CachingAttribute.AbsoluteExpiration">
            <summary>
            缓存绝对过期时间
            </summary>
        </member>
        <member name="P:Nps.Core.Aop.Attributes.CachingAttribute.ExpirationType">
            <summary>
            缓存过期类型，默认为分钟
            </summary>
        </member>
        <member name="T:Nps.Core.Aop.Attributes.ExpirationType">
            <summary>
            过期类型
            </summary>
        </member>
        <member name="F:Nps.Core.Aop.Attributes.ExpirationType.Second">
            <summary>
            秒
            </summary>
        </member>
        <member name="F:Nps.Core.Aop.Attributes.ExpirationType.Minute">
            <summary>
            分钟
            </summary>
        </member>
        <member name="F:Nps.Core.Aop.Attributes.ExpirationType.Hour">
            <summary>
            小时
            </summary>
        </member>
        <member name="F:Nps.Core.Aop.Attributes.ExpirationType.Day">
            <summary>
            天
            </summary>
        </member>
        <member name="T:Nps.Core.Aop.Attributes.DisableAuditingAttribute">
            <summary>
            禁用审计日志追踪
            </summary>
        </member>
        <member name="T:Nps.Core.Aop.Attributes.DisableSqlCurdAttribute">
            <summary>
            禁用SQL语句记录
            </summary>
        </member>
        <member name="T:Nps.Core.Aop.Attributes.IdGeneratorAttribute">
            <summary>
            实体属性启用Id生成器标记
            </summary>
        </member>
        <member name="T:Nps.Core.Aop.Attributes.TransactionalAttribute">
            <summary>
            事务
            </summary>
        </member>
        <member name="P:Nps.Core.Aop.Attributes.TransactionalAttribute.Propagation">
            <summary>
            事务传播方式
            </summary>
        </member>
        <member name="P:Nps.Core.Aop.Attributes.TransactionalAttribute.IsolationLevel">
            <summary>
            事务隔离级别
            </summary>
        </member>
        <member name="T:Nps.Core.Aop.Interceptor.CachingAsyncInterceptor">
            <summary>
            同步/异步缓存拦截器
            </summary>
        </member>
        <member name="M:Nps.Core.Aop.Interceptor.CachingAsyncInterceptor.#ctor(Microsoft.Extensions.Logging.ILogger{Nps.Core.Aop.Interceptor.CachingAsyncInterceptor},Nps.Core.Caching.ICaching)">
            <summary>
            初始化一个<see cref="T:Nps.Core.Aop.Interceptor.CachingAsyncInterceptor"/>实例
            </summary>
            <param name="logger">日志对象</param>
            <param name="caching">缓存对象</param>
        </member>
        <member name="M:Nps.Core.Aop.Interceptor.CachingAsyncInterceptor.CustomCacheKey(Castle.DynamicProxy.IInvocation)">
            <summary>
            自定义缓存的key
            </summary>
            <param name="invocation">IInvocation</param>
            <returns>返回缓存主键</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nps.Core.Aop.Interceptor.CachingAsyncInterceptor.InterceptAsync(Castle.DynamicProxy.IInvocation,System.Func{Castle.DynamicProxy.IInvocation,System.Threading.Tasks.Task})" -->
        <!-- Badly formed XML comment ignored for member "M:Nps.Core.Aop.Interceptor.CachingAsyncInterceptor.InterceptAsync``1(Castle.DynamicProxy.IInvocation,System.Func{Castle.DynamicProxy.IInvocation,System.Threading.Tasks.Task{``0}})" -->
        <member name="T:Nps.Core.Aop.Interceptor.CachingInterceptor">
            <summary>
            同步缓存拦截器
            </summary>
        </member>
        <member name="M:Nps.Core.Aop.Interceptor.CachingInterceptor.#ctor(Nps.Core.Aop.Interceptor.CachingAsyncInterceptor)">
            <summary>
            初始化一个<see cref="T:Nps.Core.Aop.Interceptor.CachingAsyncInterceptor"/>实例
            </summary>
        </member>
        <member name="M:Nps.Core.Aop.Interceptor.CachingInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            同步拦截方法
            </summary>
            <param name="invocation">IInvocation</param>
        </member>
        <member name="T:Nps.Core.Aop.Interceptor.ServiceAsyncInterceptor">
            <summary>
            同步/异步服务层异常/性能拦截器
            </summary>
        </member>
        <member name="M:Nps.Core.Aop.Interceptor.ServiceAsyncInterceptor.#ctor(Microsoft.Extensions.Logging.ILogger{Nps.Core.Aop.Interceptor.ServiceAsyncInterceptor})">
            <summary>
            初始化一个<see cref="T:Nps.Core.Aop.Interceptor.TransactionalAsyncInterceptor"/>实例
            </summary>
            <param name="logger">日志对象</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nps.Core.Aop.Interceptor.ServiceAsyncInterceptor.InterceptAsync(Castle.DynamicProxy.IInvocation,System.Func{Castle.DynamicProxy.IInvocation,System.Threading.Tasks.Task})" -->
        <!-- Badly formed XML comment ignored for member "M:Nps.Core.Aop.Interceptor.ServiceAsyncInterceptor.InterceptAsync``1(Castle.DynamicProxy.IInvocation,System.Func{Castle.DynamicProxy.IInvocation,System.Threading.Tasks.Task{``0}})" -->
        <member name="T:Nps.Core.Aop.Interceptor.ServiceInterceptor">
            <summary>
            同步服务层异常/性能拦截器
            </summary>
        </member>
        <member name="M:Nps.Core.Aop.Interceptor.ServiceInterceptor.#ctor(Nps.Core.Aop.Interceptor.ServiceAsyncInterceptor)">
            <summary>
            初始化一个<see cref="T:Nps.Core.Aop.Interceptor.ServiceInterceptor"/>实例
            </summary>
        </member>
        <member name="M:Nps.Core.Aop.Interceptor.ServiceInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            同步拦截方法
            </summary>
            <param name="invocation">IInvocation</param>
        </member>
        <member name="T:Nps.Core.Aop.Interceptor.TransactionalAsyncInterceptor">
            <summary>
            同步/异步事务拦截器
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nps.Core.Aop.Interceptor.TransactionalAsyncInterceptor.#ctor(FreeSql.UnitOfWorkManager,Microsoft.Extensions.Logging.ILogger{Nps.Core.Aop.Interceptor.TransactionalAsyncInterceptor})" -->
        <member name="M:Nps.Core.Aop.Interceptor.TransactionalAsyncInterceptor.TryBegin(Castle.DynamicProxy.IInvocation)">
            <summary>
            是否需要启动事务
            </summary>
            <param name="invocation">IInvocation</param>
            <returns>True/False</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nps.Core.Aop.Interceptor.TransactionalAsyncInterceptor.InterceptAsync(Castle.DynamicProxy.IInvocation,System.Func{Castle.DynamicProxy.IInvocation,System.Threading.Tasks.Task})" -->
        <!-- Badly formed XML comment ignored for member "M:Nps.Core.Aop.Interceptor.TransactionalAsyncInterceptor.InterceptAsync``1(Castle.DynamicProxy.IInvocation,System.Func{Castle.DynamicProxy.IInvocation,System.Threading.Tasks.Task{``0}})" -->
        <member name="T:Nps.Core.Aop.Interceptor.TransactionalInterceptor">
            <summary>
            事务同步拦截器
            </summary>
        </member>
        <member name="M:Nps.Core.Aop.Interceptor.TransactionalInterceptor.#ctor(Nps.Core.Aop.Interceptor.TransactionalAsyncInterceptor)">
            <summary>
            初始化一个<see cref="T:Nps.Core.Aop.Interceptor.TransactionalInterceptor"/>实例
            </summary>
            <param name="asyncInterceptor">TransactionalAsyncInterceptor</param>
        </member>
        <member name="M:Nps.Core.Aop.Interceptor.TransactionalInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            开启拦截
            </summary>
            <param name="invocation">IInvocation</param>
        </member>
        <member name="T:Nps.Core.Caching.ICaching">
            <summary>
            缓存接口
            </summary>
        </member>
        <member name="M:Nps.Core.Caching.ICaching.Exists(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Nps.Core.Caching.ICaching.ExistsAsync(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Nps.Core.Caching.ICaching.Get(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Nps.Core.Caching.ICaching.Get``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">键</param>
        </member>
        <member name="M:Nps.Core.Caching.ICaching.GetAsync(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Nps.Core.Caching.ICaching.GetAsync``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">键</param>
        </member>
        <member name="M:Nps.Core.Caching.ICaching.Set(System.String,System.Object)">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Nps.Core.Caching.ICaching.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expire">有效期</param>
        </member>
        <member name="M:Nps.Core.Caching.ICaching.SetAsync(System.String,System.Object)">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Nps.Core.Caching.ICaching.SetAsync(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expire">有效期</param>
        </member>
        <member name="M:Nps.Core.Caching.ICaching.Remove(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Nps.Core.Caching.ICaching.RemoveAsync(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Nps.Core.Caching.ICaching.RemoveByPatternAsync(System.String)">
            <summary>
            用于在 key 模板存在时删除
            </summary>
            <param name="pattern">key模板</param>
        </member>
        <member name="T:Nps.Core.Caching.MemoryCache">
            <summary>
            内存缓存
            </summary>
        </member>
        <member name="M:Nps.Core.Caching.MemoryCache.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            初始化
            </summary>
            <param name="memoryCache">IMemoryCache</param>
        </member>
        <member name="M:Nps.Core.Caching.MemoryCache.Exists(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Nps.Core.Caching.MemoryCache.ExistsAsync(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Nps.Core.Caching.MemoryCache.Get(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Nps.Core.Caching.MemoryCache.Get``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">键</param>
        </member>
        <member name="M:Nps.Core.Caching.MemoryCache.GetAsync(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Nps.Core.Caching.MemoryCache.GetAsync``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">键</param>
        </member>
        <member name="M:Nps.Core.Caching.MemoryCache.Set(System.String,System.Object)">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Nps.Core.Caching.MemoryCache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expire">有效期</param>
        </member>
        <member name="M:Nps.Core.Caching.MemoryCache.SetAsync(System.String,System.Object)">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Nps.Core.Caching.MemoryCache.SetAsync(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expire">有效期</param>
        </member>
        <member name="M:Nps.Core.Caching.MemoryCache.Remove(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Nps.Core.Caching.MemoryCache.RemoveAsync(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Nps.Core.Caching.MemoryCache.RemoveByPatternAsync(System.String)">
            <summary>
            用于在 key 模板存在时删除
            </summary>
            <param name="pattern">key模板</param>
        </member>
        <member name="T:Nps.Core.Caching.RedisCache">
            <summary>
            Redis缓存
            </summary>
        </member>
        <member name="M:Nps.Core.Caching.RedisCache.Exists(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Nps.Core.Caching.RedisCache.ExistsAsync(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Nps.Core.Caching.RedisCache.Get(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Nps.Core.Caching.RedisCache.Get``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">键</param>
        </member>
        <member name="M:Nps.Core.Caching.RedisCache.GetAsync(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Nps.Core.Caching.RedisCache.GetAsync``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">键</param>
        </member>
        <member name="M:Nps.Core.Caching.RedisCache.Set(System.String,System.Object)">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Nps.Core.Caching.RedisCache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expire">有效期</param>
        </member>
        <member name="M:Nps.Core.Caching.RedisCache.SetAsync(System.String,System.Object)">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Nps.Core.Caching.RedisCache.SetAsync(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expire">有效期</param>
        </member>
        <member name="M:Nps.Core.Caching.RedisCache.Remove(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Nps.Core.Caching.RedisCache.RemoveAsync(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Nps.Core.Caching.RedisCache.RemoveByPatternAsync(System.String)">
            <summary>
            用于在 key 模板存在时删除
            </summary>
            <param name="pattern">key模板</param>
        </member>
        <member name="T:Nps.Core.Config.AppSetting">
            <summary>
            配置帮助类
            </summary>
        </member>
        <member name="P:Nps.Core.Config.AppSetting.Configuration">
            <summary>
            应用程序配置属性
            </summary>
        </member>
        <member name="M:Nps.Core.Config.AppSetting.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            初始化
            </summary>
            <param name="configuration">应用程序配置属性</param>
        </member>
        <member name="M:Nps.Core.Config.AppSetting.Load">
            <summary>
            加载配置文件
            </summary>
            <returns>返回IConfiguration</returns>
        </member>
        <member name="M:Nps.Core.Config.AppSetting.Get(System.String[])">
            <summary>
            获取节点值
            </summary>
            <param name="sections">节点参数配置</param>
            <returns>返回节点值</returns>
        </member>
        <member name="M:Nps.Core.Config.AppSetting.Get``1(System.String[])">
            <summary>
            获取节点值
            </summary>
            <typeparam name="T">泛型，值类型</typeparam>
            <param name="sections">节点参数配置</param>
            <returns>返回节点值</returns>
        </member>
        <member name="T:Nps.Core.Data.ExecuteResult`1">
            <summary>
            统一Api响应结果输出
            </summary>
            <typeparam name="TResult">响应结果</typeparam>
        </member>
        <member name="P:Nps.Core.Data.ExecuteResult`1.IsSuccess">
            <summary>
            是否成功标记
            </summary>
        </member>
        <member name="P:Nps.Core.Data.ExecuteResult`1.Status">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Nps.Core.Data.ExecuteResult`1.Message">
            <summary>
            执行消息
            </summary>
        </member>
        <member name="P:Nps.Core.Data.ExecuteResult`1.Data">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="M:Nps.Core.Data.ExecuteResult`1.Ok(`0,Nps.Infrastructure.StatusCode,System.String)">
            <summary>
            成功
            </summary>
            <param name="data">返回数据</param>
            <param name="status">状态码</param>
            <param name="message">执行消息</param>
            <returns>返回执行结果</returns>
        </member>
        <member name="M:Nps.Core.Data.ExecuteResult`1.Error(System.String,Nps.Infrastructure.StatusCode,`0)">
            <summary>
            失败
            </summary>
            <param name="message">执行消息</param>
            <param name="status">状态码</param>
            <param name="data">返回数据</param>
            <returns>返回执行结果</returns>
        </member>
        <member name="T:Nps.Core.Data.ExecuteResult">
            <summary>
            统一Api响应结果输出
            </summary>
        </member>
        <member name="M:Nps.Core.Data.ExecuteResult.Ok">
            <summary>
            成功
            </summary>
            <returns>返回执行结果</returns>
        </member>
        <member name="M:Nps.Core.Data.ExecuteResult.Ok``1(``0)">
            <summary>
            成功
            </summary>
            <param name="data">返回数据</param>
            <returns>返回执行结果</returns>
        </member>
        <member name="M:Nps.Core.Data.ExecuteResult.Ok``1(``0,Nps.Infrastructure.StatusCode)">
            <summary>
            成功
            </summary>
            <param name="data">返回数据</param>
            <param name="status">状态码</param>
            <returns>返回执行结果</returns>
        </member>
        <member name="M:Nps.Core.Data.ExecuteResult.Ok``1(``0,Nps.Infrastructure.StatusCode,System.String)">
            <summary>
            成功
            </summary>
            <param name="data">返回数据</param>
            <param name="status">状态码</param>
            <param name="message">执行消息</param>
            <returns>返回执行结果</returns>
        </member>
        <member name="M:Nps.Core.Data.ExecuteResult.Error">
            <summary>
            失败
            </summary>
            <returns>返回执行结果</returns>
        </member>
        <member name="M:Nps.Core.Data.ExecuteResult.Error(System.String)">
            <summary>
            失败
            </summary>
            <param name="message">执行消息</param>
            <returns>返回执行结果</returns>
        </member>
        <member name="M:Nps.Core.Data.ExecuteResult.Error(System.String,Nps.Infrastructure.StatusCode)">
            <summary>
            失败
            </summary>
            <param name="message">执行消息</param>
            <param name="status">状态码</param>
            <returns>返回执行结果</returns>
        </member>
        <member name="M:Nps.Core.Data.ExecuteResult.Error``1(System.String,Nps.Infrastructure.StatusCode,``0)">
            <summary>
            失败
            </summary>
            <param name="message">执行消息</param>
            <param name="status">状态码</param>
            <param name="data">返回数据</param>
            <returns>返回执行结果</returns>
        </member>
        <member name="T:Nps.Core.Data.IExecuteResult">
            <summary>
            统一Api响应结果输出
            </summary>
        </member>
        <member name="P:Nps.Core.Data.IExecuteResult.IsSuccess">
            <summary>
            是否请求成功
            </summary>
        </member>
        <member name="P:Nps.Core.Data.IExecuteResult.Status">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Nps.Core.Data.IExecuteResult.Message">
            <summary>
            执行消息
            </summary>
        </member>
        <member name="T:Nps.Core.Data.IExecuteResult`1">
            <summary>
            统一Api响应结果输出
            </summary>
            <typeparam name="TResult">响应结果</typeparam>
        </member>
        <member name="P:Nps.Core.Data.IExecuteResult`1.Data">
            <summary>
            响应结果
            </summary>
        </member>
        <member name="T:Nps.Core.Data.PagingInput">
            <summary>
            分页信息输入
            </summary>
        </member>
        <member name="P:Nps.Core.Data.PagingInput.PageIndex">
            <summary>
            当前页
            </summary>
        </member>
        <member name="P:Nps.Core.Data.PagingInput.PageSize">
            <summary>
            每页大小
            </summary>
        </member>
        <member name="T:Nps.Core.Data.PagingInput`1">
            <summary>
            分页查询条件
            </summary>
        </member>
        <member name="P:Nps.Core.Data.PagingInput`1.Filter">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="T:Nps.Core.Data.PagingOutput`1">
            <summary>
            分页数据输出
            </summary>
            <typeparam name="TData">数据集</typeparam>
        </member>
        <member name="P:Nps.Core.Data.PagingOutput`1.Total">
            <summary>
            总数
            </summary>
        </member>
        <member name="P:Nps.Core.Data.PagingOutput`1.List">
            <summary>
            分页查询数据列表
            </summary>
        </member>
        <member name="M:Nps.Core.Data.PagingOutput`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Nps.Core.Data.PagingOutput`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            构造函数
            </summary>
            <param name="datas">分页数据</param>
        </member>
        <member name="M:Nps.Core.Data.PagingOutput`1.#ctor(System.Collections.Generic.List{`0},System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="datas">分页数据</param>
            <param name="total">数据总数</param>
        </member>
        <member name="T:Nps.Core.Entities.CreateAuditEntity">
            <summary>
            新增审计属性
            </summary>
        </member>
        <member name="T:Nps.Core.Entities.CreateAuditEntity`1">
            <summary>
            新增审计属性
            </summary>
        </member>
        <member name="P:Nps.Core.Entities.CreateAuditEntity`1.CreateUserId">
            <summary>
            创建者ID
            </summary>
        </member>
        <member name="P:Nps.Core.Entities.CreateAuditEntity`1.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="T:Nps.Core.Entities.FullAuditEntity">
            <summary>
            新增、更新、删除全量审计属性实体模型
            </summary>
        </member>
        <member name="T:Nps.Core.Entities.FullAuditEntity`1">
            <summary>
            新增、更新、删除全量审计属性实体模型
            </summary>
            <typeparam name="TKey">主键泛型</typeparam>
        </member>
        <member name="P:Nps.Core.Entities.FullAuditEntity`1.CreateUserId">
            <summary>
            创建者ID
            </summary>
        </member>
        <member name="P:Nps.Core.Entities.FullAuditEntity`1.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Nps.Core.Entities.FullAuditEntity`1.UpdateUserId">
            <summary>
            最后修改人Id
            </summary>
        </member>
        <member name="P:Nps.Core.Entities.FullAuditEntity`1.UpdateTime">
            <summary>
            修改时间
            </summary>
        </member>
        <member name="P:Nps.Core.Entities.FullAuditEntity`1.IsDeleted">
            <summary>
            是否删除
            </summary>
        </member>
        <member name="P:Nps.Core.Entities.FullAuditEntity`1.DeleteUserId">
            <summary>
            删除人id
            </summary>
        </member>
        <member name="P:Nps.Core.Entities.FullAuditEntity`1.DeleteTime">
            <summary>
            删除时间
            </summary>
        </member>
        <member name="T:Nps.Core.Entities.ICreateAuditEntity">
            <summary>
            创建审计属性
            </summary>
        </member>
        <member name="P:Nps.Core.Entities.ICreateAuditEntity.CreateUserId">
            <summary>
            创建者ID
            </summary>
        </member>
        <member name="T:Nps.Core.Entities.IDeleteAuditEntity">
            <summary>
            删除审计属性
            </summary>
        </member>
        <member name="P:Nps.Core.Entities.IDeleteAuditEntity.DeleteUserId">
            <summary>
            删除人id
            </summary>
        </member>
        <member name="T:Nps.Core.Entities.IHasCreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Nps.Core.Entities.IHasCreateTime.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="T:Nps.Core.Entities.IHasDeleteTime">
            <summary>
            删除时间
            </summary>
        </member>
        <member name="P:Nps.Core.Entities.IHasDeleteTime.DeleteTime">
            <summary>
            删除时间
            </summary>
        </member>
        <member name="T:Nps.Core.Entities.IHasGroup">
            <summary>
            数据归属组
            </summary>
        </member>
        <member name="P:Nps.Core.Entities.IHasGroup.GroupId">
            <summary>
            数据归属组 为数据做数据权限提供方便
            </summary>
        </member>
        <member name="T:Nps.Core.Entities.IHasRevision">
            <summary>
            乐观锁
            </summary>
        </member>
        <member name="P:Nps.Core.Entities.IHasRevision.Revision">
            <summary>
            乐观锁
            </summary>
        </member>
        <member name="T:Nps.Core.Entities.IHasUpdateTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="P:Nps.Core.Entities.IHasUpdateTime.UpdateTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="T:Nps.Core.Entities.ISoftDelete">
            <summary>
            软删除
            </summary>
        </member>
        <member name="P:Nps.Core.Entities.ISoftDelete.IsDeleted">
            <summary>
            是否删除
            </summary>
        </member>
        <member name="T:Nps.Core.Entities.IUpdateAuditEntity">
            <summary>
            更新审计属性
            </summary>
        </member>
        <member name="P:Nps.Core.Entities.IUpdateAuditEntity.UpdateUserId">
            <summary>
            最后修改人Id
            </summary>
        </member>
        <member name="T:Nps.Core.Entities.Entity`1">
            <summary>
            定义实体基类
            </summary>
            <typeparam name="TKey">泛型主键</typeparam>
        </member>
        <member name="P:Nps.Core.Entities.Entity`1.Id">
            <summary>
            主键Id，id启用生成器标识
            </summary>
        </member>
        <member name="M:Nps.Core.Entities.Entity`1.ToString">
            <summary>
            重载
            </summary>
            <returns>ToString()</returns>
        </member>
        <member name="T:Nps.Core.Entities.Entity">
            <summary>
            定义主键为long类型实体基类
            </summary>
        </member>
        <member name="T:Nps.Core.Entities.IEntity">
            <summary>
            定义实体基类接口
            </summary>
        </member>
        <member name="T:Nps.Core.Entities.IEntity`1">
            <summary>
            定义实体主键
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
        </member>
        <member name="P:Nps.Core.Entities.IEntity`1.Id">
            <summary>
            主键
            </summary>
        </member>
        <member name="T:Nps.Core.Repositories.FreeSqlRepository`1">
            <summary>
            实现FreeSql ORM仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nps.Core.Repositories.FreeSqlRepository`1.#ctor(FreeSql.UnitOfWorkManager,Nps.Core.Security.ICurrentUser)" -->
        <member name="T:Nps.Core.Repositories.FreeSqlRepository`2">
            <summary>
            实现FreeSql ORM仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">主键类型</typeparam>
        </member>
        <member name="F:Nps.Core.Repositories.FreeSqlRepository`2._currentUser">
            <summary>
            当前登录用户
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nps.Core.Repositories.FreeSqlRepository`2.#ctor(FreeSql.UnitOfWorkManager,Nps.Core.Security.ICurrentUser)" -->
        <member name="M:Nps.Core.Repositories.FreeSqlRepository`2.Insert(`0)">
            <summary>
            插入实体
            </summary>
            <param name="entity">实体</param>
            <returns>返回实体对象</returns>
        </member>
        <member name="M:Nps.Core.Repositories.FreeSqlRepository`2.InsertAsync(`0,System.Threading.CancellationToken)">
            <summary>
            插入实体
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">参数以令牌的形式转发</param>
            <returns>返回实体对象</returns>
        </member>
        <member name="M:Nps.Core.Repositories.FreeSqlRepository`2.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量插入实体
            </summary>
            <param name="entities">实体列表</param>
            <returns>返回实体列表对象</returns>
        </member>
        <member name="M:Nps.Core.Repositories.FreeSqlRepository`2.InsertAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            批量插入实体
            </summary>
            <param name="entities">实体列表</param>
            <param name="cancellationToken">参数以令牌的形式转发</param>
            <returns>返回实体列表对象</returns>
        </member>
        <member name="M:Nps.Core.Repositories.FreeSqlRepository`2.Update(`0)">
            <summary>
            更新实体
            </summary>
            <param name="entity">实体</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Nps.Core.Repositories.FreeSqlRepository`2.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            更新实体
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">参数以令牌的形式转发</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Nps.Core.Repositories.FreeSqlRepository`2.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量更新实体
            </summary>
            <param name="entities">实体列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Nps.Core.Repositories.FreeSqlRepository`2.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            批量更新实体
            </summary>
            <param name="entities">实体列表</param>
            <param name="cancellationToken">参数以令牌的形式转发</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Nps.Core.Repositories.FreeSqlRepository`2.InsertOrUpdate(`0)">
            <summary>
            插入或更新实体
            </summary>
            <param name="entity">实体</param>
            <returns>返回实体对象</returns>
        </member>
        <member name="M:Nps.Core.Repositories.FreeSqlRepository`2.InsertOrUpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            插入或更新实体
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">参数以令牌的形式转发</param>
            <returns>返回实体对象</returns>
        </member>
        <member name="M:Nps.Core.Repositories.FreeSqlRepository`2.Delete(`1)">
            <summary>
            删除实体
            </summary>
            <param name="id">主键值</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Nps.Core.Repositories.FreeSqlRepository`2.Delete(`0)">
            <summary>
            删除实体
            </summary>
            <param name="entity">实体</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Nps.Core.Repositories.FreeSqlRepository`2.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量删除实体
            </summary>
            <param name="entities">实体列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Nps.Core.Repositories.FreeSqlRepository`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件删除实体
            </summary>
            <param name="predicate">实体删除条件</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Nps.Core.Repositories.FreeSqlRepository`2.DeleteAsync(`1,System.Threading.CancellationToken)">
            <summary>
            删除实体
            </summary>
            <param name="id">主键值</param>
            <param name="cancellationToken">参数以令牌的形式转发</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Nps.Core.Repositories.FreeSqlRepository`2.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            删除实体
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">参数以令牌的形式转发</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Nps.Core.Repositories.FreeSqlRepository`2.DeleteAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            批量删除实体
            </summary>
            <param name="entities">实体列表</param>
            <param name="cancellationToken">参数以令牌的形式转发</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Nps.Core.Repositories.FreeSqlRepository`2.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            根据条件删除实体
            </summary>
            <param name="predicate">实体删除条件</param>
            <param name="cancellationToken">参数以令牌的形式转发</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="T:Nps.Core.Repositories.IFreeSqlRepository`1">
            <summary>
            定义FreeSql ORM仓储
            </summary>
        </member>
        <member name="T:Nps.Core.Repositories.IFreeSqlRepository`2">
            <summary>
            定义FreeSql ORM仓储
            当需要给公共仓储增加方法时，在此方法中增加
            </summary>
        </member>
        <member name="T:Nps.Core.Security.CurrentUser">
            <summary>
            当前认证用户
            </summary>
        </member>
        <member name="P:Nps.Core.Security.CurrentUser.IsAuthenticated">
            <summary>
            是否已认证
            </summary>
        </member>
        <member name="P:Nps.Core.Security.CurrentUser.UserId">
            <summary>
            用户Id
            </summary>
        </member>
        <member name="P:Nps.Core.Security.CurrentUser.UserName">
            <summary>
            用户账户
            </summary>
        </member>
        <member name="P:Nps.Core.Security.CurrentUser.NikeName">
            <summary>
            用户昵称
            </summary>
        </member>
        <member name="P:Nps.Core.Security.CurrentUser.Mobile">
            <summary>
            手机号
            </summary>
        </member>
        <member name="P:Nps.Core.Security.CurrentUser.Email">
            <summary>
            邮箱
            </summary>
        </member>
        <member name="P:Nps.Core.Security.CurrentUser.Roles">
            <summary>
            用户角色集合
            </summary>
        </member>
        <member name="M:Nps.Core.Security.CurrentUser.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            构造函数，初始化一个<see cref="T:Nps.Core.Security.CurrentUser"/>实例
            </summary>
            <param name="httpContextAccessor">IHttpContextAccessor</param>
        </member>
        <member name="M:Nps.Core.Security.CurrentUser.IsInRole(System.String)">
            <summary>
            是否包含某个角色
            </summary>
            <param name="roleName">验证的角色名称</param>
            <returns>True/False</returns>
        </member>
        <member name="M:Nps.Core.Security.CurrentUser.FindClaim(System.String)">
            <summary>
            根据ClaimType查找Claim
            </summary>
        </member>
        <member name="M:Nps.Core.Security.CurrentUser.FindClaims(System.String)">
            <summary>
            根据ClaimType查找Claim集合
            </summary>
        </member>
        <member name="M:Nps.Core.Security.CurrentUser.GetAllClaims">
            <summary>
            获取所有的Claim
            </summary>
        </member>
        <member name="T:Nps.Core.Security.CurrentUserExtensions">
            <summary>
            CurrentUser扩展
            </summary>
        </member>
        <member name="M:Nps.Core.Security.CurrentUserExtensions.FindClaimValue(Nps.Core.Security.ICurrentUser,System.String)">
            <summary>
            根据ClaimType查询ClaimValue
            </summary>
            <param name="currentUser">ICurrentUser</param>
            <param name="claimType">ClaimType</param>
            <returns>返回ClaimValue</returns>
        </member>
        <member name="M:Nps.Core.Security.CurrentUserExtensions.FindClaimValue``1(Nps.Core.Security.ICurrentUser,System.String)">
            <summary>
            根据ClaimType查询ClaimValue
            </summary>
            <typeparam name="T">泛型对象</typeparam>
            <param name="currentUser">ICurrentUser</param>
            <param name="claimType">ClaimType</param>
            <returns>返回ClaimValue</returns>
        </member>
        <member name="T:Nps.Core.Security.ICurrentUser">
            <summary>
            当前登录用户信息
            Reference Volo.Abp.Security
            </summary>
        </member>
        <member name="P:Nps.Core.Security.ICurrentUser.IsAuthenticated">
            <summary>
            是否已认证
            </summary>
        </member>
        <member name="P:Nps.Core.Security.ICurrentUser.UserId">
            <summary>
            用户Id
            </summary>
        </member>
        <member name="P:Nps.Core.Security.ICurrentUser.UserName">
            <summary>
            用户账户
            </summary>
        </member>
        <member name="P:Nps.Core.Security.ICurrentUser.NikeName">
            <summary>
            用户昵称
            </summary>
        </member>
        <member name="P:Nps.Core.Security.ICurrentUser.Mobile">
            <summary>
            手机号
            </summary>
        </member>
        <member name="P:Nps.Core.Security.ICurrentUser.Email">
            <summary>
            邮箱
            </summary>
        </member>
        <member name="P:Nps.Core.Security.ICurrentUser.Roles">
            <summary>
            用户角色集合
            </summary>
        </member>
        <member name="M:Nps.Core.Security.ICurrentUser.IsInRole(System.String)">
            <summary>
            是否包含某个角色
            </summary>
            <param name="roleName">验证的角色名称</param>
            <returns>True/False</returns>
        </member>
        <member name="M:Nps.Core.Security.ICurrentUser.FindClaim(System.String)">
            <summary>
            根据ClaimType查找Claim
            </summary>
        </member>
        <member name="M:Nps.Core.Security.ICurrentUser.FindClaims(System.String)">
            <summary>
            根据ClaimType查找Claim集合
            </summary>
        </member>
        <member name="M:Nps.Core.Security.ICurrentUser.GetAllClaims">
            <summary>
            获取所有的Claim
            </summary>
        </member>
        <member name="T:Nps.Core.Security.NpsClaimTypes">
            <summary>
            Define ClaimTypes
            </summary>
        </member>
        <member name="P:Nps.Core.Security.NpsClaimTypes.UserId">
            <summary>
            Default: <see cref="F:System.Security.Claims.ClaimTypes.NameIdentifier"/>
            </summary>
        </member>
        <member name="P:Nps.Core.Security.NpsClaimTypes.UserName">
            <summary>
            Default: <see cref="F:System.Security.Claims.ClaimTypes.Name"/>
            </summary>
        </member>
        <member name="P:Nps.Core.Security.NpsClaimTypes.NikeName">
            <summary>
            Default: <see cref="F:System.Security.Claims.ClaimTypes.GivenName"/>
            </summary>
        </member>
        <member name="P:Nps.Core.Security.NpsClaimTypes.Mobile">
            <summary>
            Default: "MobilePhone".
            </summary>
        </member>
        <member name="P:Nps.Core.Security.NpsClaimTypes.Email">
            <summary>
            Default: <see cref="F:System.Security.Claims.ClaimTypes.Email"/>
            </summary>
        </member>
        <member name="P:Nps.Core.Security.NpsClaimTypes.Role">
            <summary>
            Default: <see cref="F:System.Security.Claims.ClaimTypes.Role"/>
            </summary>
        </member>
        <member name="T:Nps.Core.Security.Tokens">
            <summary>
            用户访问令牌
            </summary>
        </member>
        <member name="M:Nps.Core.Security.Tokens.#ctor(System.String,System.String,System.String)">
            <summary>
            构造函数，初始化一个<see cref="T:Nps.Core.Security.Tokens"/>实例
            </summary>
            <param name="accessToken">访问Token</param>
            <param name="refreshToken">刷新Token</param>
            <param name="expiresIn">token到期时间</param>
        </member>
        <member name="P:Nps.Core.Security.Tokens.AccessToken">
            <summary>
            Access_Token
            </summary>
        </member>
        <member name="P:Nps.Core.Security.Tokens.RefreshToken">
            <summary>
            Refresh_Token
            </summary>
        </member>
        <member name="P:Nps.Core.Security.Tokens.ExpiresIn">
            <summary>
            到期时间
            </summary>
        </member>
        <member name="M:Nps.Core.Security.Tokens.ToString">
            <summary>
            重载
            </summary>
        </member>
        <member name="T:Nps.Core.Services.DomainService">
            <summary>
            实现领域服务
            </summary>
        </member>
        <member name="P:Nps.Core.Services.DomainService.ServiceProvider">
            <summary>
            IServiceProvider
            </summary>
        </member>
        <member name="F:Nps.Core.Services.DomainService.ServiceProviderLock">
            <summary>
            线程锁
            </summary>
        </member>
        <member name="M:Nps.Core.Services.DomainService.LazyGetRequiredService``1(``0@)">
            <summary>
            从DI容器中获取服务引用
            </summary>
            <typeparam name="TService">需要获取的实例对象</typeparam>
            <param name="reference">返回实例</param>
            <returns>返回实例</returns>
        </member>
        <member name="M:Nps.Core.Services.DomainService.LazyGetRequiredService``1(System.Type,``0@)">
            <summary>
            从DI容器中获取服务引用
            </summary>
            <typeparam name="TRef">服务引用</typeparam>
            <param name="serviceType">对象类型</param>
            <param name="reference">服务引用</param>
            <returns>返回服务引用</returns>
        </member>
        <member name="P:Nps.Core.Services.DomainService.CurrentUser">
            <summary>
            获取当前用户对象
            </summary>
        </member>
        <member name="P:Nps.Core.Services.DomainService.Mapper">
            <summary>
            获取AutoMapper对象
            </summary>
        </member>
        <member name="T:Nps.Core.Services.IDomainService">
            <summary>
            定义领域服务
            </summary>
        </member>
    </members>
</doc>
